/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bmi.calculator;

import javax.swing.JOptionPane;
import java.awt.*;

/**
 *  This class create a form and takes gender,age,height,weight as inputs
 *  And perform different on them to calculate the Body mass Index, Ideal 
 *  Body Weight And the fat percentage.
 *  It also performs some checks on the inputs and then do the further
 *  calculations...
 * 
 * @author Ali_Raza
 */
public class BMI extends javax.swing.JFrame {

    /**
     * Creates new form BMI
     */
    public BMI() {
        initComponents();
        
    }
    /* This is variable declaration...*/
    private static int age;                     // It stores the entered age...
    private static double heightInCM;           // It stores the height in CMs...
    private static double heightInFeet;         // It stores the height in Feets...
    private static double heightInInchs;        // It stores the height in inches...
    private static double weightInKG;           // It stores the wight in KG...
    private static double weightInLB;           // It stores the wight in LB...
    private static double weightInST;           // It stores the weight in ST...
    private static double BMI;                  // It stores the BMI...
    private static int gender;                  // It stores the gender...

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jLabel11 = new javax.swing.JLabel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel2 = new javax.swing.JLabel();
        ageField = new javax.swing.JTextField();
        heightFeild1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        weightFeild1 = new javax.swing.JTextField();
        genderSelection = new javax.swing.JComboBox<>();
        heightScale = new javax.swing.JComboBox<>();
        weightScale = new javax.swing.JComboBox<>();
        heightField2 = new javax.swing.JTextField();
        weightFeild2 = new javax.swing.JTextField();
        BMILabel = new javax.swing.JLabel();
        fatLabel = new javax.swing.JLabel();
        idealWeightLabel = new javax.swing.JLabel();
        BMIResult = new javax.swing.JLabel();
        idealWeightResult = new javax.swing.JLabel();
        fatResult = new javax.swing.JLabel();
        comments = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        verySeverelyUnderweight = new javax.swing.JLabel();
        underweight = new javax.swing.JLabel();
        severelyUnderweight = new javax.swing.JLabel();
        overweight = new javax.swing.JLabel();
        normal = new javax.swing.JLabel();
        obeseClassI = new javax.swing.JLabel();
        obeseClassII = new javax.swing.JLabel();
        obeseClassIII = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jLabel11.setText("Overweight                                       25 - 30");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 450));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jInternalFrame1.setBackground(new java.awt.Color(255, 255, 255));
        jInternalFrame1.setMinimumSize(new java.awt.Dimension(300, 450));
        jInternalFrame1.setVisible(true);

        jPanel1.setBackground(new java.awt.Color(51, 204, 0));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("BMI Calculator");

        jToolBar2.setBackground(new java.awt.Color(51, 204, 0));
        jToolBar2.setRollover(true);
        jToolBar2.setInheritsPopupMenu(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 204, 0));
        jLabel2.setText("AGE");
        jLabel2.setName("age"); // NOI18N

        ageField.setForeground(new java.awt.Color(51, 204, 0));
        ageField.setToolTipText("age");
        ageField.setName("ageField"); // NOI18N
        ageField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                ageFieldCaretUpdate(evt);
            }
        });

        heightFeild1.setForeground(new java.awt.Color(51, 204, 0));
        heightFeild1.setToolTipText("");
        heightFeild1.setName("heightFeild1"); // NOI18N
        heightFeild1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                heightFeild1CaretUpdate(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 204, 0));
        jLabel3.setText("HEIGHT");
        jLabel3.setName("height"); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 204, 0));
        jLabel4.setText("WEIGHT");
        jLabel4.setName("wight"); // NOI18N

        weightFeild1.setForeground(new java.awt.Color(51, 204, 0));
        weightFeild1.setName("wieghtTextField"); // NOI18N
        weightFeild1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                weightFeild1CaretUpdate(evt);
            }
        });

        genderSelection.setForeground(new java.awt.Color(51, 204, 0));
        genderSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MALE", "FEMALE" }));
        genderSelection.setName("genderSelection"); // NOI18N
        genderSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderSelectionActionPerformed(evt);
            }
        });

        heightScale.setForeground(new java.awt.Color(51, 204, 0));
        heightScale.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CM", "FT+IN" }));
        heightScale.setName("heightScale"); // NOI18N
        heightScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heightScaleActionPerformed(evt);
            }
        });

        weightScale.setForeground(new java.awt.Color(51, 204, 0));
        weightScale.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "KG", "LB", "ST+LB" }));
        weightScale.setName("weightScale"); // NOI18N
        weightScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightScaleActionPerformed(evt);
            }
        });

        heightField2.setForeground(new java.awt.Color(51, 204, 0));
        heightField2.setName("heightField2"); // NOI18N
        heightField2.setSelectionColor(new java.awt.Color(51, 255, 255));
        heightField2.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                heightField2CaretUpdate(evt);
            }
        });

        weightFeild2.setForeground(new java.awt.Color(51, 204, 0));
        weightFeild2.setName("weightFeild2"); // NOI18N
        weightFeild2.setSelectionColor(new java.awt.Color(51, 255, 255));
        weightFeild2.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                weightFeild2CaretUpdate(evt);
            }
        });

        BMILabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BMILabel.setText("BMI");

        fatLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fatLabel.setText("FAT");

        idealWeightLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        idealWeightLabel.setText("IDEAL WEIGHT");

        BMIResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        BMIResult.setText("?");

        idealWeightResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        idealWeightResult.setText("?");

        fatResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        fatResult.setText("?");

        comments.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comments.setText("Enter Your Details");

        jLabel5.setForeground(new java.awt.Color(51, 204, 0));
        jLabel5.setText("BMI CLASSIFICATION");

        verySeverelyUnderweight.setForeground(new java.awt.Color(255, 0, 0));
        verySeverelyUnderweight.setText("Very Severely Underweight          < 16");

        underweight.setForeground(new java.awt.Color(204, 153, 0));
        underweight.setText("Underweight                                 17 - 18.5");

        severelyUnderweight.setForeground(new java.awt.Color(204, 102, 0));
        severelyUnderweight.setText("Severely Underweight                  16 - 17");

        overweight.setForeground(new java.awt.Color(204, 153, 0));
        overweight.setText("Overweight                                   25 - 30");

        normal.setForeground(new java.awt.Color(51, 204, 0));
        normal.setText("Normal                                          18.5 - 25");

        obeseClassI.setForeground(new java.awt.Color(204, 102, 0));
        obeseClassI.setText("Obese Class I                                30 - 35");

        obeseClassII.setForeground(new java.awt.Color(255, 0, 0));
        obeseClassII.setText("Obese Class II                               35 - 40");

        obeseClassIII.setForeground(new java.awt.Color(153, 0, 0));
        obeseClassIII.setText("Obese Class III                              > 40");

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)))
                        .addGap(18, 18, 18)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(heightFeild1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(heightField2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addComponent(weightFeild1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(weightFeild2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(weightScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(heightScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(genderSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comments)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BMIResult)
                                    .addComponent(BMILabel))
                                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(idealWeightLabel))
                                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(idealWeightResult)))))
                        .addGap(27, 27, 27)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fatResult)
                            .addComponent(fatLabel))))
                .addContainerGap(63, Short.MAX_VALUE))
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(obeseClassI)
                            .addComponent(severelyUnderweight)
                            .addComponent(verySeverelyUnderweight)
                            .addComponent(underweight)
                            .addComponent(normal)
                            .addComponent(overweight)
                            .addComponent(obeseClassII)
                            .addComponent(obeseClassIII))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(genderSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(heightScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heightFeild1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heightField2))
                .addGap(23, 23, 23)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(weightFeild1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightFeild2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BMILabel)
                    .addComponent(fatLabel)
                    .addComponent(idealWeightLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BMIResult)
                    .addComponent(fatResult)
                    .addComponent(idealWeightResult))
                .addGap(18, 18, 18)
                .addComponent(comments)
                .addGap(28, 28, 28)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verySeverelyUnderweight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(severelyUnderweight, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(underweight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(normal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overweight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(obeseClassI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(obeseClassII)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(obeseClassIII)
                .addGap(62, 62, 62))
        );

        ageField.getAccessibleContext().setAccessibleDescription("");
        heightScale.getAccessibleContext().setAccessibleName("heightScale");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * This method is called when we change the scale for height.
     * i.e cm to feet/inches...
     */
    private void heightScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heightScaleActionPerformed
        
        if(heightScale.getSelectedItem().equals("CM")){
            /* If User selects 'CM' then following things are handeled...*/
            heightField2.hide();
            heightFeild1.setToolTipText("CM");
            this.calculateBMI();
        }
        else if(heightScale.getSelectedItem().equals("FT+IN")){
            /* If User selects 'FT+IN' then following things are handeled...*/
            heightField2.show();
            heightFeild1.setToolTipText("feet");
            heightField2.setToolTipText("inch");
            this.calculateBMI();
        }
            /* Common things to handle in both cases.Some initial steps for next calculation...*/
            heightFeild1.setText("");
            heightField2.setText("");
            this.heightInCM=0.0;
            this.heightInFeet=0.0;
            this.heightInInchs=0.0;
            idealWeightResult.setText("?");
            this.idealWeightLabel.setForeground(new Color(0,0,0));
            this.idealWeightResult.setForeground(new Color(0,0,0));
            this.calculateBMI();
    }//GEN-LAST:event_heightScaleActionPerformed

    /**
     *  This method is called when the form loads its components...
     *  And it includes some preliminary steps for the initial stage...
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        /* Some initial handling at the loading time of the form...*/
        weightFeild2.hide();
        heightField2.hide();
        weightFeild1.setToolTipText("KG");
        heightFeild1.setToolTipText("CM");
        age=0;
        heightInCM=0.0;
        weightInKG=0.0;
        BMI=0.0;
        /* This assigns initial value to the gender...*/
        if(this.genderSelection.getSelectedItem().equals("MALE")){
            this.gender=1;                                       // If gender is MALE...
        }
        else if(this.genderSelection.getSelectedItem().equals("FEMALE")){
            this.gender=0;                                          // If gender is FEMALE...
        }
    }//GEN-LAST:event_formComponentShown
    /**
     *  This method is called when Weight measuring scale is changed.
     *  i.e KG to LB...
     */
    private void weightScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightScaleActionPerformed
        if(weightScale.getSelectedItem().equals("KG")){
            /* When user selects 'KG' from the scales...*/
            weightFeild1.show();
            weightFeild2.hide();
            weightFeild1.setToolTipText("KG");
        }
        else if(weightScale.getSelectedItem().equals("LB")){
            /* When user selects 'LB' from the scales...*/
            weightFeild2.hide();
            weightFeild1.show();
            weightFeild1.setToolTipText("LB");
        }
        else if(weightScale.getSelectedItem().equals("ST+LB")){
            /* When user selects 'ST+LB' from the scales...*/
            weightFeild2.show();
            weightFeild1.show(); 
            weightFeild2.setToolTipText("LB");
            weightFeild1.setToolTipText("ST");
        }
        // Common things in all selections
            weightInKG=0.0;
            weightInLB=0.0;
            weightInST=0.0;
            weightFeild1.setText("");
            weightFeild2.setText("");
    }//GEN-LAST:event_weightScaleActionPerformed
    
    /**
     *  This method is called when any update happens in the age field...
     */
    private void ageFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ageFieldCaretUpdate
        // TODO add your handling code here:
        boolean valid=false;
        try{
            /* Taking the value of the age in this.age variable...*/
            this.age=Integer.valueOf(this.ageField.getText());
            /* Validating age...*/
            if(this.age>999){
                JOptionPane.showMessageDialog(null,"Out of bound age value. Enter an age value ranging from 0-999");
                this.age=0;
            }  
            else{
                /* If age is valid set valid to true...*/
                valid=true;
            }
        }catch(HeadlessException | NumberFormatException e){
            /* If any exception is thrown while getting the age value and field is not empty...*/
            if(!(ageField.getText().equals(""))){
                JOptionPane.showMessageDialog(null,"Invalid Age value. Enter an integer value.");
            }
            else{
                /* If age field is empty do following things...*/
                fatResult.setText("?");
                fatResult.setForeground(new Color(0,0,0));
                fatLabel.setForeground(new Color(0,0,0));
            }
        }
        
        if(valid){
            /* If age is valid then call the fat calculate method...*/
            this.calculateFat();
        }
    }//GEN-LAST:event_ageFieldCaretUpdate
    /**
     *  This method is called when height measuring scale is changed...
     */
    private void heightFeild1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_heightFeild1CaretUpdate
        /* Check for valid input...*/
        boolean valid=false;
        if(heightScale.getSelectedItem().equals("CM")){
            /* If user selects 'CM' scale for the height...*/
            try{
                heightInCM=Integer.valueOf(heightFeild1.getText());
                /* Validating the height. its should not be greator than 5...*/
                if(heightFeild1.getText().length()>5){
                    JOptionPane.showMessageDialog(null,"Out of bound CM value. Number can contain only 5 digits.");
                    heightInCM=0;
                }
                else{
                    /* If input is valid set valid to true...*/ 
                    valid=true;
                }
            }catch(HeadlessException | NumberFormatException e){
                /* If any Exception is thrown by the user. And field is not empty... */
                if(!heightFeild1.getText().equals(""))
                    JOptionPane.showMessageDialog(null,"Invalid CM value. Enter a number.");
                else{
                    /* If field is empty do the following things...*/
                    heightInCM=0.0;
                    idealWeightResult.setText("?");
                    this.idealWeightLabel.setForeground(new Color(0,0,0));
                    this.idealWeightResult.setForeground(new Color(0,0,0));
                    this.calculateBMI();
                }
            }
        }
        else if(heightScale.getSelectedItem().equals("FT+IN")){
            /* If User selects FT+IN...*/
            try{
                heightInFeet=Double.valueOf(heightFeild1.getText());
                /* Feets length should not acceed 3...*/
                if(heightFeild1.getText().length()>3){
                    JOptionPane.showMessageDialog(null,"Out of bound feet length. Should be less than or equal to 3");
                    heightInFeet=0.0;
                }
                else{
                    /* If input is valid set valid to true...*/
                    valid=true;
                }
            }catch(HeadlessException | NumberFormatException e){
                /* In case of any Exception when text field is not empty do the following things...*/ 
                if(!heightFeild1.getText().equals(""))
                    JOptionPane.showMessageDialog(null,"Invalid feet value. Enter a number.");
                else if(heightField2.equals("")){
                        idealWeightResult.setText("?");
                        this.idealWeightLabel.setForeground(new Color(0,0,0));
                        this.idealWeightResult.setForeground(new Color(0,0,0));
                        this.calculateBMI();
                }
            }      
        }
        if(valid){
                this.calculateIBW();
            }
    }//GEN-LAST:event_heightFeild1CaretUpdate
    /**
     *  This method is called when value of 2nd height field is changed...
     */
    private void heightField2CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_heightField2CaretUpdate
        /* This keeps the check of the valid value...*/
        boolean valid=false;
        try{
            heightInInchs=Double.valueOf(heightField2.getText());
            /* Inches length should not acceed 4.*/
            if(heightField2.getText().length()>4){
                 JOptionPane.showMessageDialog(null,"Out of bound length of inchs. Should be less than or equal to 4");
                 heightInInchs=0.0;
            }else{
                /* In case of valid input set valid to true...*/
                valid=true;
            }
                }catch(HeadlessException | NumberFormatException e){
                    /* Show a message when Exception is thrown when field is empty...*/
                    if(!heightField2.getText().equals(""))
                        JOptionPane.showMessageDialog(null,"Invalid inch value. Enter a number.");
                    else if(heightFeild1.equals("")){
                        /* If both height field are empty do the following things...*/
                        idealWeightResult.setText("?");
                        this.idealWeightLabel.setForeground(new Color(0,0,0));
                        this.idealWeightResult.setForeground(new Color(0,0,0));
                        this.calculateBMI();
                    }
            }
        if(valid){
                /* If the input is valid calculate the Ideal Body Weight...*/
                this.calculateIBW();
            }
        
    }//GEN-LAST:event_heightField2CaretUpdate
    
    /**
     *  This method is to calculate the Ideal Body Weight. It uses the Lemmens Formula
     *  to calculate the IBW. Which is 22 * height^2(meter). It gives weight in KG...
     */
    private void calculateIBW(){
       /* If no height has been entered by user then reset the result...*/
       if(this.heightInCM==0.0 && this.heightInInchs==0.0 && this.heightInFeet==0.0){
           idealWeightResult.setText("?");
       }
       else{
           /* If height is entered in feet and inches, first convert it to centimeter...*/ 
           if(this.heightScale.getSelectedItem().equals("FT+IN")){
               heightInCM = (heightInFeet*30.48) + (heightInInchs*2.54);
           }
           
            Double IBW;             /* to store IBW*/
            /* Formula to calculate Ideal Body Weight...*/
            IBW = (22 * Math.pow(heightInCM/100,2));
            /* Converting IBW to string to display on the form...*/
            String str=String.format("%.1f", IBW);
            /* Setting things to display on the form...*/
            idealWeightResult.setText(str + "KG");
            this.idealWeightLabel.setForeground(new Color(51,204,0));
            this.idealWeightResult.setForeground(new Color(51,204,0));
       }
    }
    
    /**
     *  This method calculates the Body Mass Index. It uses the following formula
     *  BMI = mass(kg) / height^2(meter)
     */
    private void calculateBMI(){
       /** In order to calculate BMI we need both height and weight. So first we
        *  need to check that we have both the things...
        */
       /* If height is entered in feet and inches cnvert in into cms...*/ 
       if(this.heightScale.getSelectedItem().equals("FT+IN")){
               heightInCM = (heightInFeet*30.48) + (heightInInchs*2.54);
           }
       /* If weight is entered in ST and LB convert it in to KGs...*/
       if(this.weightScale.getSelectedItem().equals("ST+LB")){
           this.weightInKG = (weightInST * 6.35029) + (weightInLB * 0.453592);
       }
           
        if(weightInKG != 0.0 && heightInCM != 0.0){
            /* Applying the formula to calculate the BMI...*/
            BMI = (weightInKG / Math.pow((heightInCM / 100), 2));
            /* Converting the result to string to send to the form...*/
            String str = String.format("%.2f", BMI);
            /* And finally displaying the result on the form...*/
            BMIResult.setText(str);
            this.BMIClassification();
            this.calculateFat();
        }
        else{
            BMIResult.setText("?");
            BMIResult.setForeground(new Color(0,0,0));
            BMILabel.setForeground(new Color(0,0,0));
        }
    }
    
    /**
     *  This method calculates the fat percentage of the user. it uses different formulas
     *  for child and adults to for the calculations...
     */
    private void calculateFat(){
        /* First check that we have a valid age and BMI. As these both are used in the formula...*/
        if(this.age != 0 && BMI != 0){
            Double fat;
            if(this.age < 18){
                /* Calculating the fat ratio in child*/
                fat = (1.51 * this.BMI) - (0.70 * this.age) - (3.6 * this.gender) + 1.4;
            }
            else{
                /* Calculating fat ration in adults...*/
                fat = (1.20 * this.BMI) + (0.23 * this.age) - (10.8 * this.gender) - 5.4;
            }
            /* Finally converting the result into the string and send to display on the form...*/
            String str = String.format("%.2f", fat);
            fatResult.setText(str + "%");
            fatResult.setForeground(BMIResult.getForeground());
            fatLabel.setForeground(BMIResult.getForeground());
        }
    }
    /**
     *  This method classify different users on the basis of BMI. And do some handling to
     *  display that to the user...
     */
    private void BMIClassification(){
        if(BMI < 16){
           /** 
            * If BMI is less than 16 the user is very Severely underweight. And really need to
            * take healthy diet to obtain the normal shape... 
            */
            comments.setText("Time to grab a bite!");
            comments.setForeground(this.verySeverelyUnderweight.getForeground());
            BMILabel.setForeground(this.verySeverelyUnderweight.getForeground());
            BMIResult.setForeground(this.verySeverelyUnderweight.getForeground());
        }
        else if(BMI < 17){
          /** 
            * If BMI is less than 17 the user is Severely underweight. And need to
            * take healthy diet to obtain the normal shape... 
            */
            comments.setText("Time to grab a bite!");
            comments.setForeground(this.severelyUnderweight.getForeground());
            BMILabel.setForeground(this.severelyUnderweight.getForeground());
            BMIResult.setForeground(this.severelyUnderweight.getForeground());
        }
        else if(BMI < 18.5){
           /** 
            * If BMI is less than 18.5 the user is underweight.It can be overcome with
            * some proper diet... 
            */
            comments.setText("Time to grab a bite!");
            comments.setForeground(this.underweight.getForeground());
            BMILabel.setForeground(this.underweight.getForeground());
            BMIResult.setForeground(this.underweight.getForeground());
        }
        else if(BMI < 25){
          /** 
            * If BMI is less than 25 the user is normal. Fit completely. Enjoying a 
            * good healthy life...
            */
            comments.setText("Great Shape!");
            comments.setForeground(this.normal.getForeground());
            BMILabel.setForeground(this.normal.getForeground());
            BMIResult.setForeground(this.normal.getForeground());
        }
        else if(BMI < 30){
          /** 
            * If BMI is from 25 to 30 the user a bit overweight. No need to user can be
            * great by a little bit exercise...
            */
            comments.setText("Time for a run!");
            comments.setForeground(this.overweight.getForeground());
            BMILabel.setForeground(this.overweight.getForeground());
            BMIResult.setForeground(this.overweight.getForeground());
        }
        else if(BMI < 35){
           /** 
            * If BMI is from 30 to 35 then the user belong to the obese class I. Needed to
            * exercising to attain good health...
            */
            comments.setText("Time for a run!");
            comments.setForeground(this.obeseClassI.getForeground());
            BMILabel.setForeground(this.obeseClassI.getForeground());
            BMIResult.setForeground(this.obeseClassI.getForeground());
        }
        else if(BMI <= 40){
          /** 
            * If BMI is from 35 to 40 then user belongs to the obese class II. Serious need 
            * of exercising to enjoy a healthy life...
            */
            comments.setText("Time for a run!");
            comments.setForeground(this.obeseClassII.getForeground());
            BMILabel.setForeground(this.obeseClassII.getForeground());
            BMIResult.setForeground(this.obeseClassII.getForeground());
        }
        else if(BMI > 40){
          /** 
            * If BMI is greater than 40 the user belongs to the obese class III. A great need
            * of exercising if he wants to enjoy a healthy life...
            */
            comments.setText("Time for a run!");
            comments.setForeground(this.obeseClassIII.getForeground());
            BMILabel.setForeground(this.obeseClassIII.getForeground());
            BMIResult.setForeground(this.obeseClassIII.getForeground());
        }
    }
            
    /**
     *  This is called when any updation done to weight field 1...
     */
    private void weightFeild1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_weightFeild1CaretUpdate
        /* Check for invalid input*/
        boolean valid=false;
        if(!weightScale.getSelectedItem().equals("ST+LB")){
            /* If user not selects 'ST+LB' scale for the weight...*/ 
            try{
                /* If user selects 'KG'...*/
                if(weightScale.getSelectedItem().equals("KG")){
                    weightInKG = Double.valueOf(weightFeild1.getText());
                }
                /* If user selects 'LB'...*/
                else{
                    weightInKG = (Double.valueOf(weightFeild1.getText()) * 0.453592);
                }
                /* Length of weight should not acceed 5...*/
                if(weightFeild1.getText().length()>5){
                    JOptionPane.showMessageDialog(null,"Out of bound length of weight. Should be less than or equal to 5");
                    weightInKG=0.0;
                }else{
                    /* If input is valid set it true...*/ 
                    valid=true;
                }
                
            }catch(HeadlessException | NumberFormatException e){
                /* If Exception is thrown and field is not empty...*/
                if(!weightFeild1.getText().equals(""))
                    JOptionPane.showMessageDialog(null,"Invalid value of weight. Enter a digit.");
            }
        }
        else if(weightScale.getSelectedItem().equals("ST+LB")){
            /* If user 'ST+LB' Scale for the weight...*/
            try{
                this.weightInST = Double.valueOf(this.weightFeild1.getText());
                /* length should be less than 5....*/
                if(weightFeild1.getText().length()>5){
                    JOptionPane.showMessageDialog(null,"Out of bound length of weight. Should be less than or equal to 5");
                    weightInST=0.0;
                }else{
                    /* For valid input...*/
                    valid=true;
                }
                
            }catch(HeadlessException | NumberFormatException e){
                /* If Exception is thrown and field is not empty...*/
                if(!weightFeild1.getText().equals(""))
                    JOptionPane.showMessageDialog(null,"Invalid value of weight. Enter a digit.");
            }
        
        }
        if(valid){
            /* If every thing is good call the method to compute BMI...*/
            this.calculateBMI();
        }
    }//GEN-LAST:event_weightFeild1CaretUpdate
    /**
     *  This method is called when value of weight field 2 is changed.... 
     */
    private void weightFeild2CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_weightFeild2CaretUpdate
        /* Check for the valid value... */
        boolean valid=false;
        if(weightScale.getSelectedItem().equals("ST+LB")){
            /* If user 'LB' Scale for the weight...*/
            try{
                this.weightInLB = Double.valueOf(this.weightFeild2.getText());
                /* length should be less than 5....*/
                if(weightFeild2.getText().length()>5){
                    JOptionPane.showMessageDialog(null,"Out of bound length of weight. Should be less than or equal to 5");
                    weightInLB=0.0;
                }else{
                    /* For valid input...*/
                    valid=true;
                }
                
            }catch(Exception e){
                /* If Exception is thrown and field is not empty...*/
                if(!weightFeild2.getText().equals(""))
                    JOptionPane.showMessageDialog(null,"Invalid value of weight. Enter a digit.");
            }
        }
        if(valid){
            /* In case of valid input calculate the BMI...*/
            this.calculateBMI();
        }
    }//GEN-LAST:event_weightFeild2CaretUpdate

    /**
     *  This method is called when the gender is changed...
     */
    private void genderSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genderSelectionActionPerformed
        if(this.genderSelection.getSelectedItem().equals("MALE")){
           /* If the geder is male set the value of this.gender variable to 1*/
           this.gender=1;
        }
        else if(this.genderSelection.getSelectedItem().equals("FEMALE")){
           /* If its Female set it to 0...*/
           this.gender=0;
        }
        /* And in the end calculate the fat percentage...*/
        this.calculateFat();
    }//GEN-LAST:event_genderSelectionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BMI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BMI().setVisible(true);
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BMILabel;
    private javax.swing.JLabel BMIResult;
    private javax.swing.JTextField ageField;
    private javax.swing.JLabel comments;
    private javax.swing.JLabel fatLabel;
    private javax.swing.JLabel fatResult;
    private javax.swing.JComboBox<String> genderSelection;
    private javax.swing.JTextField heightFeild1;
    private javax.swing.JTextField heightField2;
    private javax.swing.JComboBox<String> heightScale;
    private javax.swing.JLabel idealWeightLabel;
    private javax.swing.JLabel idealWeightResult;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel normal;
    private javax.swing.JLabel obeseClassI;
    private javax.swing.JLabel obeseClassII;
    private javax.swing.JLabel obeseClassIII;
    private javax.swing.JLabel overweight;
    private javax.swing.JLabel severelyUnderweight;
    private javax.swing.JLabel underweight;
    private javax.swing.JLabel verySeverelyUnderweight;
    private javax.swing.JTextField weightFeild1;
    private javax.swing.JTextField weightFeild2;
    private javax.swing.JComboBox<String> weightScale;
    // End of variables declaration//GEN-END:variables
}